package watchdog

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/jromero/openfaas-cnb/pkg/watchdog.HttpClient -o ./http_client_mock_test.go

import (
	"net/http"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HttpClientMock implements HttpClient
type HttpClientMock struct {
	t minimock.Tester

	funcGet          func(url string) (rp1 *http.Response, err error)
	inspectFuncGet   func(url string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mHttpClientMockGet
}

// NewHttpClientMock returns a mock for HttpClient
func NewHttpClientMock(t minimock.Tester) *HttpClientMock {
	m := &HttpClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mHttpClientMockGet{mock: m}
	m.GetMock.callArgs = []*HttpClientMockGetParams{}

	return m
}

type mHttpClientMockGet struct {
	mock               *HttpClientMock
	defaultExpectation *HttpClientMockGetExpectation
	expectations       []*HttpClientMockGetExpectation

	callArgs []*HttpClientMockGetParams
	mutex    sync.RWMutex
}

// HttpClientMockGetExpectation specifies expectation struct of the HttpClient.Get
type HttpClientMockGetExpectation struct {
	mock    *HttpClientMock
	params  *HttpClientMockGetParams
	results *HttpClientMockGetResults
	Counter uint64
}

// HttpClientMockGetParams contains parameters of the HttpClient.Get
type HttpClientMockGetParams struct {
	url string
}

// HttpClientMockGetResults contains results of the HttpClient.Get
type HttpClientMockGetResults struct {
	rp1 *http.Response
	err error
}

// Expect sets up expected params for HttpClient.Get
func (mmGet *mHttpClientMockGet) Expect(url string) *mHttpClientMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("HttpClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &HttpClientMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &HttpClientMockGetParams{url}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the HttpClient.Get
func (mmGet *mHttpClientMockGet) Inspect(f func(url string)) *mHttpClientMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for HttpClientMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by HttpClient.Get
func (mmGet *mHttpClientMockGet) Return(rp1 *http.Response, err error) *HttpClientMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("HttpClientMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &HttpClientMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &HttpClientMockGetResults{rp1, err}
	return mmGet.mock
}

//Set uses given function f to mock the HttpClient.Get method
func (mmGet *mHttpClientMockGet) Set(f func(url string) (rp1 *http.Response, err error)) *HttpClientMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the HttpClient.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the HttpClient.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the HttpClient.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mHttpClientMockGet) When(url string) *HttpClientMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("HttpClientMock.Get mock is already set by Set")
	}

	expectation := &HttpClientMockGetExpectation{
		mock:   mmGet.mock,
		params: &HttpClientMockGetParams{url},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up HttpClient.Get return parameters for the expectation previously defined by the When method
func (e *HttpClientMockGetExpectation) Then(rp1 *http.Response, err error) *HttpClientMock {
	e.results = &HttpClientMockGetResults{rp1, err}
	return e.mock
}

// Get implements HttpClient
func (mmGet *HttpClientMock) Get(url string) (rp1 *http.Response, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(url)
	}

	mm_params := &HttpClientMockGetParams{url}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := HttpClientMockGetParams{url}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("HttpClientMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the HttpClientMock.Get")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(url)
	}
	mmGet.t.Fatalf("Unexpected call to HttpClientMock.Get. %v", url)
	return
}

// GetAfterCounter returns a count of finished HttpClientMock.Get invocations
func (mmGet *HttpClientMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of HttpClientMock.Get invocations
func (mmGet *HttpClientMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to HttpClientMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mHttpClientMockGet) Calls() []*HttpClientMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*HttpClientMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *HttpClientMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *HttpClientMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HttpClientMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HttpClientMock.Get")
		} else {
			m.t.Errorf("Expected call to HttpClientMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to HttpClientMock.Get")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HttpClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HttpClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HttpClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone()
}
